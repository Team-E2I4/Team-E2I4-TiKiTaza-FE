/* tslint:disable */
/* eslint-disable */
/**
 * 티키타자 백엔드 API 명세서
 * 티키타자 백엔드 API 명세서 입니다
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface AccountGetResponse
 */
export interface AccountGetResponse {
  /**
   *
   * @type {number}
   * @memberof AccountGetResponse
   */
  memberId: number;
  /**
   *
   * @type {string}
   * @memberof AccountGetResponse
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AccountGetResponse
   */
  nickname: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountGetResponse
   */
  isGuest: boolean;
}
/**
 *
 * @export
 * @interface ApiResponseAccountGetResponse
 */
export interface ApiResponseAccountGetResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseAccountGetResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseAccountGetResponse
   */
  message: string;
  /**
   *
   * @type {AccountGetResponse}
   * @memberof ApiResponseAccountGetResponse
   */
  data?: AccountGetResponse;
}
/**
 *
 * @export
 * @interface AccountGetResponse
 */
export interface AccountGetResponse {
  /**
   *
   * @type {number}
   * @memberof AccountGetResponse
   */
  memberId: number;
  /**
   *
   * @type {string}
   * @memberof AccountGetResponse
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AccountGetResponse
   */
  nickname: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountGetResponse
   */
  isGuest: boolean;
}
/**
 *
 * @export
 * @interface ApiResponseAccountGetResponse
 */
export interface ApiResponseAccountGetResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseAccountGetResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseAccountGetResponse
   */
  message: string;
  /**
   *
   * @type {AccountGetResponse}
   * @memberof ApiResponseAccountGetResponse
   */
  data?: AccountGetResponse;
}
/**
 *
 * @export
 * @interface ApiResponseAuthResponse
 */
export interface ApiResponseAuthResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseAuthResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseAuthResponse
   */
  message: string;
  /**
   *
   * @type {AuthResponse}
   * @memberof ApiResponseAuthResponse
   */
  data: AuthResponse;
}
/**
 *
 * @export
 * @interface ApiResponseGameRoomCreateResponse
 */
export interface ApiResponseGameRoomCreateResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseGameRoomCreateResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseGameRoomCreateResponse
   */
  message: string;
  /**
   *
   * @type {GameRoomCreateResponse}
   * @memberof ApiResponseGameRoomCreateResponse
   */
  data?: GameRoomCreateResponse;
}
/**
 *
 * @export
 * @interface ApiResponseGameRoomEnterResponse
 */
export interface ApiResponseGameRoomEnterResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseGameRoomEnterResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseGameRoomEnterResponse
   */
  message: string;
  /**
   *
   * @type {GameRoomEnterResponse}
   * @memberof ApiResponseGameRoomEnterResponse
   */
  data?: GameRoomEnterResponse;
}
/**
 *
 * @export
 * @interface ApiResponseGameRoomInviteCodeResponse
 */
export interface ApiResponseGameRoomInviteCodeResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseGameRoomInviteCodeResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseGameRoomInviteCodeResponse
   */
  message: string;
  /**
   *
   * @type {GameRoomInviteCodeResponse}
   * @memberof ApiResponseGameRoomInviteCodeResponse
   */
  data?: GameRoomInviteCodeResponse;
}
/**
 *
 * @export
 * @interface ApiResponseListMemberRankResponse
 */
export interface ApiResponseListMemberRankResponse {
  /**
   *
   * @type {string}
   * @memberof ApiResponseListMemberRankResponse
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseListMemberRankResponse
   */
  message: string;
  /**
   *
   * @type {Array<MemberRankResponse>}
   * @memberof ApiResponseListMemberRankResponse
   */
  data?: Array<MemberRankResponse>;
}
/**
 *
 * @export
 * @interface ApiResponseMemberSignUpResponse
 */
export interface ApiResponseMemberSignUpResponse {
    /**
     * 
     * @type {string}
     * @memberof ApiResponseMemberSignUpResponse
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseMemberSignUpResponse
     */
    'message': string;
    /**
     * 
     * @type {MemberSignUpResponse}
     * @memberof ApiResponseMemberSignUpResponse
     */
    'data'?: MemberSignUpResponse;
}
/**
 *
 * @export
 * @interface ApiResponseVoid
 */
export interface ApiResponseVoid {
  /**
   *
   * @type {string}
   * @memberof ApiResponseVoid
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ApiResponseVoid
   */
  message: string;
  /**
   *
   * @type {object}
   * @memberof ApiResponseVoid
   */
  data?: object;
}
/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  errorCode: string;
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  errorMessage: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof ErrorResponse
   */
  validation?: { [key: string]: string };
}
/**
 *
 * @export
 * @interface GameRoomCreateRequest
 */
export interface GameRoomCreateRequest {
  /**
   *
   * @type {string}
   * @memberof GameRoomCreateRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof GameRoomCreateRequest
   */
  password?: string;
  /**
   *
   * @type {number}
   * @memberof GameRoomCreateRequest
   */
  maxPlayer: number;
  /**
   *
   * @type {number}
   * @memberof GameRoomCreateRequest
   */
  round: number;
  /**
   *
   * @type {string}
   * @memberof GameRoomCreateRequest
   */
  gameType: string;
}
/**
 *
 * @export
 * @interface GameRoomCreateResponse
 */
export interface GameRoomCreateResponse {
  /**
   *
   * @type {number}
   * @memberof GameRoomCreateResponse
   */
  roomId: number;
}
/**
 *
 * @export
 * @interface GameRoomEnterRequest
 */
export interface GameRoomEnterRequest {
  /**
   *
   * @type {string}
   * @memberof GameRoomEnterRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface GameRoomEnterResponse
 */
export interface GameRoomEnterResponse {
  /**
   *
   * @type {number}
   * @memberof GameRoomEnterResponse
   */
  roomId: number;
  /**
   *
   * @type {number}
   * @memberof GameRoomEnterResponse
   */
  memberId: number;
}
/**
 *
 * @export
 * @interface GameRoomInviteCodeResponse
 */
export interface GameRoomInviteCodeResponse {
  /**
   *
   * @type {number}
   * @memberof GameRoomInviteCodeResponse
   */
  roomId: number;
}
/**
 *
 * @export
 * @interface GameRoomUpdateRequest
 */
export interface GameRoomUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof GameRoomUpdateRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof GameRoomUpdateRequest
   */
  password?: string;
  /**
   *
   * @type {number}
   * @memberof GameRoomUpdateRequest
   */
  maxPlayer: number;
  /**
   *
   * @type {number}
   * @memberof GameRoomUpdateRequest
   */
  round: number;
  /**
   *
   * @type {string}
   * @memberof GameRoomUpdateRequest
   */
  gameType: string;
}
/**
 *
 * @export
 * @interface GameRoomCreateResponse
 */
export interface GameRoomCreateResponse {
  /**
   *
   * @type {number}
   * @memberof GameRoomCreateResponse
   */
  roomId: number;
}
/**
 *
 * @export
 * @interface GameRoomEnterRequest
 */
export interface GameRoomEnterRequest {
  /**
   *
   * @type {string}
   * @memberof GameRoomEnterRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface GameRoomEnterResponse
 */
export interface GameRoomEnterResponse {
  /**
   *
   * @type {number}
   * @memberof GameRoomEnterResponse
   */
  roomId: number;
  /**
   *
   * @type {number}
   * @memberof GameRoomEnterResponse
   */
  memberId: number;
}
/**
 *
 * @export
 * @interface GameRoomInviteCodeResponse
 */
export interface GameRoomInviteCodeResponse {
  /**
   *
   * @type {number}
   * @memberof GameRoomInviteCodeResponse
   */
  roomId: number;
}
/**
 *
 * @export
 * @interface GameRoomUpdateRequest
 */
export interface GameRoomUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof GameRoomUpdateRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof GameRoomUpdateRequest
   */
  password?: string;
  /**
   *
   * @type {number}
   * @memberof GameRoomUpdateRequest
   */
  maxPlayer: number;
  /**
   *
   * @type {number}
   * @memberof GameRoomUpdateRequest
   */
  round: number;
  /**
   *
   * @type {string}
   * @memberof GameRoomUpdateRequest
   */
  gameType: string;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password: string;
}
/**
 *
 * @export
 * @interface MemberRankResponse
 */
export interface MemberRankResponse {
  /**
   *
   * @type {number}
   * @memberof MemberRankResponse
   */
  memberId: number;
  /**
   *
   * @type {string}
   * @memberof MemberRankResponse
   */
  nickname: string;
  /**
   *
   * @type {number}
   * @memberof MemberRankResponse
   */
  totalScore: number;
  /**
   *
   * @type {number}
   * @memberof MemberRankResponse
   */
  averageWpm: number;
  /**
   *
   * @type {number}
   * @memberof MemberRankResponse
   */
  averageAccuracy: number;
}
/**
 *
 * @export
 * @interface MemberSignUpRequest
 */
export interface MemberSignUpRequest {
  /**
   *
   * @type {string}
   * @memberof MemberSignUpRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof MemberSignUpRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof MemberSignUpRequest
   */
  passwordConfirm: string;
  /**
   *
   * @type {string}
   * @memberof MemberSignUpRequest
   */
  nickname: string;
}
/**
 *
 * @export
 * @interface MemberSignUpResponse
 */
export interface MemberSignUpResponse {
  /**
   *
   * @type {number}
   * @memberof MemberSignUpResponse
   */
  memberId: number;
}
/**
 *
 * @export
 * @interface MemberSignUpResponse
 */
export interface MemberSignUpResponse {
  /**
   *
   * @type {number}
   * @memberof MemberSignUpResponse
   */
  memberId: number;
}
/**
 *
 * @export
 * @interface NicknameUpdateRequest
 */
export interface NicknameUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof NicknameUpdateRequest
     */
    'nickname': string;
}
/**
 *
 * @export
 * @interface SseEmitter
 */
export interface SseEmitter {
  /**
   *
   * @type {number}
   * @memberof SseEmitter
   */
  timeout?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 게임 방 생성: 방장은 생성 후 자동입장됩니다.
     * @param {GameRoomCreateRequest} gameRoomCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGameRoom: async (
      gameRoomCreateRequest: GameRoomCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameRoomCreateRequest' is not null or undefined
      assertParamExists(
        'createGameRoom',
        'gameRoomCreateRequest',
        gameRoomCreateRequest
      );
      const localVarPath = `/api/v1/rooms`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameRoomCreateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원 삭제
     * @param {string} authorization
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMemberAccount: async (
      authorization: string,
      refreshToken: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      assertParamExists('deleteMemberAccount', 'authorization', authorization);
      // verify required parameter 'refreshToken' is not null or undefined
      assertParamExists('deleteMemberAccount', 'refreshToken', refreshToken);
      const localVarPath = `/api/v1/members`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (authorization != null) {
        localVarHeaderParameter['Authorization'] = String(authorization);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 게임 방 입장: 일반 유저 입장
     * @param {number} roomId
     * @param {GameRoomEnterRequest} [gameRoomEnterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enterGameRoom: async (
      roomId: number,
      gameRoomEnterRequest?: GameRoomEnterRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roomId' is not null or undefined
      assertParamExists('enterGameRoom', 'roomId', roomId);
      const localVarPath = `/api/v1/rooms/{roomId}/enter`.replace(
        `{${'roomId'}}`,
        encodeURIComponent(String(roomId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameRoomEnterRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 랭킹 조회
     * @param {string} [gameType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberRanking: async (
      gameType?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/ranks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (gameType !== undefined) {
        localVarQueryParameter['gameType'] = gameType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 내 프로필 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyProfileInfo: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/members/my-profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 게임방 초대코드로 방 번호 반환
     * @param {string} inviteCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomIdByInviteCode: async (
      inviteCode: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inviteCode' is not null or undefined
      assertParamExists('getRoomIdByInviteCode', 'inviteCode', inviteCode);
      const localVarPath = `/api/v1/rooms/{inviteCode}`.replace(
        `{${'inviteCode'}}`,
        encodeURIComponent(String(inviteCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 게스트 로그인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guestLogin: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/auth/guest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 로그인
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      loginRequest: LoginRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginRequest' is not null or undefined
      assertParamExists('login', 'loginRequest', loginRequest);
      const localVarPath = `/api/v1/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 로그아웃
     * @param {string} authorization
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (
      authorization: string,
      refreshToken: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorization' is not null or undefined
      assertParamExists('logout', 'authorization', authorization);
      // verify required parameter 'refreshToken' is not null or undefined
      assertParamExists('logout', 'refreshToken', refreshToken);
      const localVarPath = `/api/v1/auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (authorization != null) {
        localVarHeaderParameter['Authorization'] = String(authorization);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 토큰 재발급
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reIssueAccessToken: async (
      refreshToken: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refreshToken' is not null or undefined
      assertParamExists('reIssueAccessToken', 'refreshToken', refreshToken);
      const localVarPath = `/api/v1/auth/reissue`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberSignUpRequest} memberSignUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (
      memberSignUpRequest: MemberSignUpRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'memberSignUpRequest' is not null or undefined
      assertParamExists('signUp', 'memberSignUpRequest', memberSignUpRequest);
      const localVarPath = `/api/v1/members/sign-up`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        memberSignUpRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 게임 방 설정 변경
     * @param {number} roomId
     * @param {GameRoomUpdateRequest} gameRoomUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameRoom: async (
      roomId: number,
      gameRoomUpdateRequest: GameRoomUpdateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roomId' is not null or undefined
      assertParamExists('updateGameRoom', 'roomId', roomId);
      // verify required parameter 'gameRoomUpdateRequest' is not null or undefined
      assertParamExists(
        'updateGameRoom',
        'gameRoomUpdateRequest',
        gameRoomUpdateRequest
      );
      const localVarPath = `/api/v1/rooms/{roomId}`.replace(
        `{${'roomId'}}`,
        encodeURIComponent(String(roomId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameRoomUpdateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원 닉네임 업데이트. 소셜 로그인 시 사용
     * @param {NicknameUpdateRequest} nicknameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMemberNickname: async (
      nicknameUpdateRequest: NicknameUpdateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'nicknameUpdateRequest' is not null or undefined
      assertParamExists(
        'updateMemberNickname',
        'nicknameUpdateRequest',
        nicknameUpdateRequest
      );
      const localVarPath = `/api/v1/members`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        nicknameUpdateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 게임 방 생성: 방장은 생성 후 자동입장됩니다.
     * @param {GameRoomCreateRequest} gameRoomCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createGameRoom(
      gameRoomCreateRequest: GameRoomCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseGameRoomCreateResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createGameRoom(
        gameRoomCreateRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.createGameRoom']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 회원 삭제
     * @param {string} authorization
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMemberAccount(
      authorization: string,
      refreshToken: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseVoid>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteMemberAccount(
          authorization,
          refreshToken,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.deleteMemberAccount']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 게임 방 입장: 일반 유저 입장
     * @param {number} roomId
     * @param {GameRoomEnterRequest} [gameRoomEnterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async enterGameRoom(
      roomId: number,
      gameRoomEnterRequest?: GameRoomEnterRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseGameRoomEnterResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.enterGameRoom(
        roomId,
        gameRoomEnterRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.enterGameRoom']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 랭킹 조회
     * @param {string} [gameType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMemberRanking(
      gameType?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseListMemberRankResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMemberRanking(gameType, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.getMemberRanking']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 내 프로필 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyProfileInfo(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseAccountGetResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyProfileInfo(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.getMyProfileInfo']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 게임방 초대코드로 방 번호 반환
     * @param {string} inviteCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoomIdByInviteCode(
      inviteCode: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseGameRoomInviteCodeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRoomIdByInviteCode(
          inviteCode,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.getRoomIdByInviteCode']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 게스트 로그인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async guestLogin(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseAuthResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.guestLogin(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.guestLogin']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 로그인
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      loginRequest: LoginRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseAuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        loginRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 로그아웃
     * @param {string} authorization
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      authorization: string,
      refreshToken: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseVoid>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(
        authorization,
        refreshToken,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.logout']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 토큰 재발급
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reIssueAccessToken(
      refreshToken: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseAuthResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reIssueAccessToken(
          refreshToken,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.reIssueAccessToken']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberSignUpRequest} memberSignUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      memberSignUpRequest: MemberSignUpRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseMemberSignUpResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        memberSignUpRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.signUp']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 게임 방 설정 변경
     * @param {number} roomId
     * @param {GameRoomUpdateRequest} gameRoomUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGameRoom(
      roomId: number,
      gameRoomUpdateRequest: GameRoomUpdateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseVoid>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateGameRoom(
        roomId,
        gameRoomUpdateRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.updateGameRoom']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 회원 닉네임 업데이트. 소셜 로그인 시 사용
     * @param {NicknameUpdateRequest} nicknameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMemberNickname(
      nicknameUpdateRequest: NicknameUpdateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiResponseVoid>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateMemberNickname(
          nicknameUpdateRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.updateMemberNickname']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary 게임 방 생성: 방장은 생성 후 자동입장됩니다.
     * @param {GameRoomCreateRequest} gameRoomCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGameRoom(
      gameRoomCreateRequest: GameRoomCreateRequest,
      options?: any
    ): AxiosPromise<ApiResponseGameRoomCreateResponse> {
      return localVarFp
        .createGameRoom(gameRoomCreateRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원 삭제
     * @param {string} authorization
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMemberAccount(
      authorization: string,
      refreshToken: string,
      options?: any
    ): AxiosPromise<ApiResponseVoid> {
      return localVarFp
        .deleteMemberAccount(authorization, refreshToken, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 게임 방 입장: 일반 유저 입장
     * @param {number} roomId
     * @param {GameRoomEnterRequest} [gameRoomEnterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enterGameRoom(
      roomId: number,
      gameRoomEnterRequest?: GameRoomEnterRequest,
      options?: any
    ): AxiosPromise<ApiResponseGameRoomEnterResponse> {
      return localVarFp
        .enterGameRoom(roomId, gameRoomEnterRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 랭킹 조회
     * @param {string} [gameType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberRanking(
      gameType?: string,
      options?: any
    ): AxiosPromise<ApiResponseListMemberRankResponse> {
      return localVarFp
        .getMemberRanking(gameType, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 내 프로필 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyProfileInfo(
      options?: any
    ): AxiosPromise<ApiResponseAccountGetResponse> {
      return localVarFp
        .getMyProfileInfo(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 게임방 초대코드로 방 번호 반환
     * @param {string} inviteCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomIdByInviteCode(
      inviteCode: string,
      options?: any
    ): AxiosPromise<ApiResponseGameRoomInviteCodeResponse> {
      return localVarFp
        .getRoomIdByInviteCode(inviteCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 게스트 로그인
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guestLogin(options?: any): AxiosPromise<ApiResponseAuthResponse> {
      return localVarFp
        .guestLogin(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 로그인
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      loginRequest: LoginRequest,
      options?: any
    ): AxiosPromise<ApiResponseAuthResponse> {
      return localVarFp
        .login(loginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 로그아웃
     * @param {string} authorization
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(
      authorization: string,
      refreshToken: string,
      options?: any
    ): AxiosPromise<ApiResponseVoid> {
      return localVarFp
        .logout(authorization, refreshToken, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 토큰 재발급
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reIssueAccessToken(
      refreshToken: string,
      options?: any
    ): AxiosPromise<ApiResponseAuthResponse> {
      return localVarFp
        .reIssueAccessToken(refreshToken, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberSignUpRequest} memberSignUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(
      memberSignUpRequest: MemberSignUpRequest,
      options?: any
    ): AxiosPromise<ApiResponseMemberSignUpResponse> {
      return localVarFp
        .signUp(memberSignUpRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 게임 방 설정 변경
     * @param {number} roomId
     * @param {GameRoomUpdateRequest} gameRoomUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameRoom(
      roomId: number,
      gameRoomUpdateRequest: GameRoomUpdateRequest,
      options?: any
    ): AxiosPromise<ApiResponseVoid> {
      return localVarFp
        .updateGameRoom(roomId, gameRoomUpdateRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원 닉네임 업데이트. 소셜 로그인 시 사용
     * @param {NicknameUpdateRequest} nicknameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMemberNickname(
      nicknameUpdateRequest: NicknameUpdateRequest,
      options?: any
    ): AxiosPromise<ApiResponseVoid> {
      return localVarFp
        .updateMemberNickname(nicknameUpdateRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 게임 방 생성: 방장은 생성 후 자동입장됩니다.
   * @param {GameRoomCreateRequest} gameRoomCreateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createGameRoom(
    gameRoomCreateRequest: GameRoomCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .createGameRoom(gameRoomCreateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원 삭제
   * @param {string} authorization
   * @param {string} refreshToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteMemberAccount(
    authorization: string,
    refreshToken: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteMemberAccount(authorization, refreshToken, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 게임 방 입장: 일반 유저 입장
   * @param {number} roomId
   * @param {GameRoomEnterRequest} [gameRoomEnterRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public enterGameRoom(
    roomId: number,
    gameRoomEnterRequest?: GameRoomEnterRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .enterGameRoom(roomId, gameRoomEnterRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 랭킹 조회
   * @param {string} [gameType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMemberRanking(gameType?: string, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMemberRanking(gameType, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 내 프로필 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMyProfileInfo(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMyProfileInfo(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 게임방 초대코드로 방 번호 반환
   * @param {string} inviteCode
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRoomIdByInviteCode(
    inviteCode: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRoomIdByInviteCode(inviteCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 게스트 로그인
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public guestLogin(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .guestLogin(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 로그인
   * @param {LoginRequest} loginRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .login(loginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 로그아웃
   * @param {string} authorization
   * @param {string} refreshToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public logout(
    authorization: string,
    refreshToken: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .logout(authorization, refreshToken, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 토큰 재발급
   * @param {string} refreshToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public reIssueAccessToken(
    refreshToken: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .reIssueAccessToken(refreshToken, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원가입
   * @param {MemberSignUpRequest} memberSignUpRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public signUp(
    memberSignUpRequest: MemberSignUpRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .signUp(memberSignUpRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 게임 방 설정 변경
   * @param {number} roomId
   * @param {GameRoomUpdateRequest} gameRoomUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateGameRoom(
    roomId: number,
    gameRoomUpdateRequest: GameRoomUpdateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateGameRoom(roomId, gameRoomUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원 닉네임 업데이트. 소셜 로그인 시 사용
   * @param {NicknameUpdateRequest} nicknameUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateMemberNickname(
    nicknameUpdateRequest: NicknameUpdateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateMemberNickname(nicknameUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SSEApi - axios parameter creator
 * @export
 */
export const SSEApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary SSE: 게임방 목록 받아오기
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connect: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SSEApi - functional programming interface
 * @export
 */
export const SSEApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SSEApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary SSE: 게임방 목록 받아오기
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connect(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SseEmitter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.connect(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SSEApi.connect']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SSEApi - factory interface
 * @export
 */
export const SSEApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SSEApiFp(configuration);
  return {
    /**
     *
     * @summary SSE: 게임방 목록 받아오기
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connect(options?: any): AxiosPromise<SseEmitter> {
      return localVarFp
        .connect(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SSEApi - object-oriented interface
 * @export
 * @class SSEApi
 * @extends {BaseAPI}
 */
export class SSEApi extends BaseAPI {
  /**
   *
   * @summary SSE: 게임방 목록 받아오기
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SSEApi
   */
  public connect(options?: RawAxiosRequestConfig) {
    return SSEApiFp(this.configuration)
      .connect(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
